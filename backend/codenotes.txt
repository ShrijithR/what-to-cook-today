from fastapi import FastAPI
from contextlib import asynccontextmanager
from sqlalchemy.orm import Session
from database import SessionLocal, init_db

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("Initializing database...")
    init_db()
    yield
    print("Cleanup tasks here if needed")

app = FastAPI(lifespan=lifespan)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# Signup Endpoint
@app.post("/signup/")
def signup(username: str, password: str, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter(User.username == username).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already taken")
    
    user = create_user(username, password, db)
    return {"message": "User created successfully", "user": user.username}

# Login Endpoint
@app.post("/login/")
def login(username: str, password: str, db: Session = Depends(get_db)):
    user = authenticate_user(username, password, db)
    if not user:
        raise HTTPException(status_code=401, detail="Invalid username or password")
    
    return {"message": "Login successful", "user": user.username}
